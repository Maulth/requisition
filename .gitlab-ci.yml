image: ruby:2.4.1-alpine
services:
  - postgres:latest

stages:
  - dependencies
  - test
  - deploy

variables:
  RAILS_ENV: test
  RACK_ENV: test
  DB_HOST: postgres
  DB_USER: postgres
  DB_PASSWORD: ""

.dependencies: &dependencies
  before_script:
    - mkdir -p /cache/bundle
    - ls -lAh /cache/bundle
    - bundle check --path=/cache/bundle || bundle install --path=/cache/bundle --without=production,development,deploy,doc
    - git status --short && test "$(git status --short | grep Gemfile.lock)" = ""

lint:
  <<: *dependencies
  stage: test
  tags:
    - ruby
  artifacts:
    paths:
      - rubocop.html
  script:
    - bundle exec rubocop --rails --fail-level=warning --display-cop-names --format=progress --format=offenses --format=html --out="rubocop.html"

test:
  <<: *dependencies
  image: ruby:2.4.1
  stage: test
  tags:
    - ruby
    - postgres
  artifacts:
    paths:
      - coverage/
  script:
    - bundle exec rake db:create
    - bundle exec rake db:migrate
    - git status --short && test "$(git status --short | grep db/schema.rb)" = ""
    - bundle exec rake assets:precompile
    - bundle exec rake test

staging:
  stage: deploy
  tags:
    - ruby
  script:
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_STAGING_APP_NAME --api-key=$HEROKU_API_KEY
    - "curl -n -X POST https://api.heroku.com/apps/$HEROKU_STAGING_APP_NAME/ps -H \"Accept: application/json\" -H \"Authorization: Bearer ${HEROKU_API_KEY}\" -d \"command=bundle exec rake db:migrate\""
  environment:
    name: staging
  only:
    - develop

production:
  stage: deploy
  tags:
    - ruby
  script:
    - gem install dpl
    - dpl --provider=heroku --app=$HEROKU_PRODUCTION_APP_NAME --api-key=$HEROKU_API_KEY
    - "curl -n -X POST https://api.heroku.com/apps/$HEROKU_PRODUCTION_APP_NAME/ps -H \"Accept: application/json\" -H \"Authorization: Bearer ${HEROKU_API_KEY}\" -d \"command=bundle exec rake db:migrate\""
  environment:
    name: production
  only:
    - master
