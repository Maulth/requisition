stages:
  - dependencies
  - test
  - deploy

variables:
  RAILS_ENV: test
  RACK_ENV: test
  DB_HOST: postgres
  DB_USER: postgres
  DB_PASSWORD: ""

.before: &before
  before_script:
    - mkdir -p /cache/bundle
    - ls -lAh /cache/bundle
    - bundle check || bundle install --without=production,development,deploy,doc
    - git status --short && test "$(git status --short | grep Gemfile.lock)" = ""

rubocop:
  stage: test
  image: ruby:2.4.4
  tags:
    - docker
  <<: *before
  script:
    - bundle exec rubocop --rails --fail-level=warning --display-cop-names --format=progress --format=offenses --format=html --out="rubocop.html"
  artifacts:
    paths:
      - rubocop.html

brakeman:
  stage: test
  image: ruby:2.4.4
  tags:
    - docker
  <<: *before
  script:
    - bundle exec brakeman --run-all-checks --rails5 --confidence-level=2

test:
  stage: test
  image: ruby:2.4.4
  services:
  - postgres:9.6-alpine
  tags:
    - docker
  <<: *before
  artifacts:
    paths:
      - coverage/
  script:
    - bundle exec rails db:create
    - bundle exec rails db:migrate
    - git status --short && test "$(git status --short | grep db/schema.rb)" = ""
    - bundle exec rails assets:precompile
    - bundle exec rails test

staging:
  stage: deploy
  image: ruby:2.4.4
  tags:
    - docker
  script:
    - ENVIRONMENT=staging ./bin/deploy
  environment:
    name: staging
  only:
    - master

production:
  stage: deploy
  image: ruby:2.4.4
  tags:
    - docker
  script:
    - ENVIRONMENT=production ./bin/deploy
  environment:
    name: production
  only:
    - master
  when: manual
